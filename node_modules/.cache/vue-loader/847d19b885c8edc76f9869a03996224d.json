{"remainingRequest":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/src/components/Profile/Collection/Collection.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/src/components/Profile/Collection/Collection.vue","mtime":1550975652103},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/cache-loader/dist/cjs.js","mtime":1548990847448},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/babel-loader/lib/index.js","mtime":1548990846981},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/cache-loader/dist/cjs.js","mtime":1548990847448},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/vue-loader/lib/index.js","mtime":1548990850526}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport axios from 'axios'\nimport SeeMoreModal from './Modals/SeeMoreModal.vue'\nimport AddWatchModal from './Modals/AddWatchModal.vue'\nimport DraggableWatchCollection from './DraggableWatchCollection.vue'\nimport NonDraggableWatchCollection from './NonDraggableWatchCollection.vue'\nimport ManageCollection from './ManageCollection.vue'\nimport { setTimeout } from 'timers'\nimport loader from '../../Loader.vue'\nimport LoadImageUtility from '../../../Utilities/LoadImageUtility'\nimport ImgBase64 from 'base64-img'\n\n\nexport default {\n  components: {\n    seeMoreModal: SeeMoreModal,\n    addWatchModal: AddWatchModal,\n    draggableWatchCollection: DraggableWatchCollection,\n    nonDraggableWatchCollection: NonDraggableWatchCollection,\n    manageCollection: ManageCollection,\n    loader: loader\n  },\n  data () {\n    return {\n      isS3UploadEvent: false,\n      isChangedOrder: false,\n      addWatchCount: 1,\n\n      showDismissibleAlert: false,\n      isAddingWatch: false,\n      isEditingExistingWatch: false,\n      selectedWatch: {},\n      isSeeMore: false,\n      addWatch: {\n        src: { images: [] }\n      },\n      addWatchImages: [],\n      isFeaturedWatch: false,\n      hasCollection: false,\n      searchTerms: [\n        'brand',\n        'name',\n        'model',\n        'ref'\n      ]\n    }\n  },\n\n  methods: {\n    uploadImagesToAwsS3 () {\n      let files = this.addWatch.src.images\n      this.addWatchCount++\n      this.S3UploadEventListener(true)\n      let fileArr = []\n      files.forEach(file => {\n          if (!LoadImageUtility.ContainsS3Information(file.src.substring(0, 30))) {\n              console.log('new image, so going to save base 64 to s3', file)\n              fileArr.push(\n              { src: file.src,\n                // fileName: file.fileName\n              })\n          } \n      })\n      if (fileArr[0]) {\n        console.log('There are new images to upload, so I will upload this array of base 64 images to s3', fileArr, this.addWatch.src.images.length)\n        this.$store.dispatch('uploadImagesToAwsS3', fileArr)\n            .then(images => {  \n            let tempArr = this.addWatch.src.images.concat(images)\n            let imagesCount = 0;\n            for (let i = 0; i < tempArr.length; i++) {\n                if (!LoadImageUtility.ContainsS3Information(tempArr[i].src.substring(0, 30))) { // if the src property on the index of the current array does not contaain S3 information\n                    tempArr[i].src = images[imagesCount].src\n                    // tempArr[i].order = i\n                    imagesCount++\n                }\n            }\n            imagesCount = 0\n\n                \n\n            // this.addWatch.src.images = tempArr\n            this.S3UploadEventListener(false)\n            fileArr = []\n\n\n\n\n\n            // console.log('got this back', images)\n            //     let currentArr = this.addWatch.src.images\n            //     // images.forEach(s3Img => { // for each new s3 image check the current images for the next non s3 image str, map it\n            //     for (let j = 0; j < images.length; j++) {\n            //         for (let i = 0; i < currentArr.length; i++) {\n            //             if (!LoadImageUtility.ContainsS3Information(currentArr[i].src.substring(0, 30))) { // if the current img is not a S3 bucket string, let's make it one\n            //                     console.log('its new!!',currentArr[i].src, 'to become',  images[j].Location)\n            //                     currentArr[i].src = images[j].Location\n            //                     currentArr[i].order = i\n            //                     currentArr[i].fileName = images[j].fileName\n            //                     break\n            //                 }\n            //             }\n            //         }\n            // this.addWatch.src.images = currentArr\n            \n        }).catch(err => {\n            console.log(err)\n            this.S3UploadEventListener(false) \n        })\n      }\n      else {\n          this.S3UploadEventListener(false)\n      }\n    },\n\n    S3UploadEventListener(value) {\n        this.isS3UploadEvent = value;\n    },\n\n    selectWatch (watch) {\n      this.selectedWatch = watch\n      this.$refs.seeMoreModal.show()\n    //   this.$store.dispatch('ToggleIsModalPopped', true)\n\n    // Analytics\n      this.$ga.event({\n        eventCategory: 'Watch_Collection',\n        eventAction: 'See_More_Modal_Click',\n        eventLabel: 'Open See More Watch Modal'\n      })\n    },\n\n    editWatchModal (watch) {\n      this.addWatch = watch\n      this.isAddingWatch = false\n      this.isEditingExistingWatch = true\n      this.addWatch.name = this.titleCase(watch.name)\n      this.addWatch.brand = this.titleCase(watch.brand)\n      this.$refs.addWatchModal.show()\n    //   this.$store.dispatch('ToggleIsModalPopped', true)\n\n      // Analytics\n      this.$ga.event({\n        eventCategory: 'Manage_Collection',\n        eventAction: 'Edit_Watch_Modal_Click',\n        eventLabel: 'Begin Editing Watch'\n      })\n    },\n\n    OpenWotdSeeMore (watchId) {\n      let watch = this.Collection.find(x => x.id === watchId)\n      this.selectWatch(watch)\n\n        this.$ga.event({\n            eventCategory: 'Watch_Collection',\n            eventAction: 'WOTD_Btn_Click',\n            eventLabel: 'WOTD + See More Watch Modal'\n        })\n    },\n\n    SelectRandomWatch () {\n      let max = this.Collection.length\n      let min = 0\n      let index = Math.floor(Math.random() * (max - min) + min)\n      let randomWatch = this.Collection[index]\n      this.selectWatch(randomWatch)\n\n      // Analytics\n      this.$ga.event({\n        eventCategory: 'Manage_Collection',\n        eventAction: 'Random_Watch_Btn_Click',\n        eventLabel: 'Random Watch + See More Watch Modal'\n      })\n    },\n\n    addWatchModal () {\n      this.createAddWatch()\n      this.isAddingWatch = true\n      this.isEditingExistingWatch = false\n      this.$refs.addWatchModal.show()\n    //   this.$store.dispatch('ToggleIsModalPopped', true)\n\n      // Analytics\n      this.$ga.event({\n        eventCategory: 'Manage_Collection',\n        eventAction: 'Add_Watch_Btn_Click',\n        eventLabel: 'Begin Adding Watch'\n      })\n    },\n\n    resetWatchFormAndModals () {\n        console.log('ooooojjjjjj closing')\n      this.isAddingWatch = false\n      this.isEditingExistingWatch = false\n      this.$refs.addWatchModal.hide()\n      this.$refs.seeMoreModal.hide()\n    //   this.$store.dispatch('ToggleIsModalPopped', false) // Modals closed\n      this.addWatch = this.addWatch\n      this.addWatchCount = 1\n    },\n\n    previewWatch () {\n      if (this.addWatch.brand) { this.addWatch.brand = this.addWatch.brand.toLowerCase() }\n      this.addWatch.name = this.addWatch.name.toLowerCase()\n      this.selectedWatch = this.addWatch\n\n      this.$refs.seeMoreModal.show()\n    //   this.$store.dispatch('ToggleIsModalPopped', true)\n\n      // Analytics\n      this.$ga.event({\n        eventCategory: 'Manage_Collection',\n        eventAction: 'Add_Watch_Modal_Click',\n        eventLabel: 'Preview Adding Watch'\n      })\n    },\n\n    submitWatch () {\n      this.$refs.addWatchModal.hide()      \n      this.isAddingWatch = false\n      this.isEditingExistingWatch = false\n      this.$refs.seeMoreModal.hide()\n    //   this.$store.dispatch('ToggleIsModalPopped', false)\n      if (!this.addWatch.id) {\n        // watch doesnt exist yet, create new watch\n        this.$store.dispatch('submitNewWatch', this.addWatch)\n\n        if (this.$store.state.DelayPrompt) {\n            this.$store.state.DelayPrompt.prompt()\n    \n            this.$store.state.DelayPrompt.userChoice.then(selection => {\n                if (selection.outcome === 'accepted') {\n                    this.$ga.event({\n                        eventCategory: 'PWA Banner Prompt',\n                        eventAction: 'Accept Banner',\n                    })\n                } else {\n                    this.$ga.event({\n                        eventCategory: 'PWA Banner Prompt',\n                        eventAction: 'Decline Banner',\n                    })\n                }\n            })\n        }\n\n        this.$ga.event({\n            eventCategory: 'Manage_Collection',\n            eventAction: 'Add_Watch_Modal_Click',\n            eventLabel: 'Submit New Watch'\n        })\n      } else {\n          // editing existing watch\n        this.$store.dispatch('submitEditWatch', this.addWatch)\n\n        this.$ga.event({\n            eventCategory: 'Manage_Collection',\n            eventAction: 'Edit_Watch_Modal_Click',\n            eventLabel: 'Submit Edit Watch'\n        })\n      }\n      this.createAddWatch() // reset add watch to defaults\n      this.addWatchCount = 1 // resets watch count\n    },\n\n    backToEditStart () {\n      this.addWatchCount = 1\n      this.$refs.addWatchModal.show()\n      this.$refs.seeMoreModal.hide()\n\n      this.$ga.event({\n        eventCategory: 'Manage_Collection',\n        eventAction: 'Add_Watch_Modal_Click',\n        eventLabel: 'Restart Editing Watch'\n      })\n    },\n\n    createAddWatch () {\n      this.addWatch = {\n        src: { images: [] },\n        brand: '',\n        name: '',\n        isForSale: false,\n        isForTrade: false,\n        isFullKit: false,\n        watchStyle: null,\n        watchStyle: null,\n        accuracy: null,\n        movement: null,\n        movementType: null,\n        sizeLugToLug: null,\n        sizeWidth: null,\n        sizeHeight: null,\n        crystal: null,\n        band: '',\n        model: '',\n        ref: '',\n        forSalePrice: null,\n        forTradeValue: null,\n        acquiredFor: null,\n        dateAcquired: ''\n      }\n    },\n\n    orderChanged () {\n      this.isChangedOrder = true\n    },\n\n    titleCase (str) {\n      var splitStr = str.toLowerCase().split(' ')\n      for (var i = 0; i < splitStr.length; i++) {\n        splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1)\n      }\n      return splitStr.join(' ')\n    },\n\n    getCollectionTotalValue () {\n        let val = 0\n        let Collection = this.$store.state.Collection\n        if (Collection[0]) {\n            Collection.forEach(x => {\n          if (x.forSalePrice) {\n            val += +x.forSalePrice\n          } else if (x.marketValue) {\n            val += +x.marketValue\n            \n          } else if (x.forTradeValue) {\n            val += +x.forTradeValue\n          }\n        })\n        }\n        \n        \n        if (val > 0) {\n          return val\n        } else {\n          return 'N/A'\n        }\n      },\n  },\n\n  computed:\n    {\n    //   IsModalPopped () {\n    //       return this.$store.state.isModalPopped\n    //   },\n\n      isLoading () {\n        return this.$store.state.isLoading\n      },\n\n      User () {\n        return this.$store.state.User\n      },\n\n      isDragToOrganize () {\n          return this.$store.state.isDragToOrganize\n      },\n\n      Collection () {\n        if (this.isManagingCollection) {\n          return this.$store.state.FilteredCollection\n        } else return this.$store.state.Collection\n      },\n\n      isManagingCollection () {\n        return this.$store.state.isManagingCollection\n      },\n\n      isUserLoaded () {\n        return this.$store.state.isUserLoaded\n      },\n\n      isCollectionLoaded () {\n        return this.$store.state.isCollectionLoaded\n      },\n\n      isFilteringCollection () {\n        return this.$store.state.isFilteringCollection\n      },\n\n    //   WOTD () {\n    //       let Collection = this.$store.state.Collection;\n    //       if (Collection[0]) {\n    //         let i = this.$store.state.cookieValueWOTD\n    //         let c = this.$store.state.Collection[i];\n    //         return { name: c.name, id: c.id }\n    //       } else {\n    //           return 'Add a Watch to your Collection!'\n    //       }\n    //   }\n    },\n\n  created: function () {\n    this.$store.dispatch('loadUserCollection')\n    this.$store.dispatch('getFavorites')\n  }\n}\n",null]}