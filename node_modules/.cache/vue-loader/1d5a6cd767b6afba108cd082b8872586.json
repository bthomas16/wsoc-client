{"remainingRequest":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/src/components/Profile/Collection/ManageCollection.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/src/components/Profile/Collection/ManageCollection.vue","mtime":1549736375774},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/babel-loader/lib/index.js","mtime":1548990846981},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/cache-loader/dist/cjs.js","mtime":1548990847448},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/vue-loader/lib/index.js","mtime":1548990850526}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'manageCollection',\n  props: [],\n\n  data () {\n    return {\n      conditionToFilterBy: '',\n      styleToFilterBy: '',\n      statusToFilterBy: '',\n      searchTermToFilterBy: '',\n      sortCategory: null,\n      sortCategories: [\n        { value: null, text: 'Sort By', disabled: true },\n        { value: 'condition', text: 'Condition' },\n        { value: 'status', text: 'Status' },\n        { value: 'style', text: 'Style' },\n        { value: 'favorites', text: 'Favorites' },\n        { value: 'previous', text: 'Removed' }\n      ],\n\n      categoryOptions: [{ value: null, text: 'Sort Criteria', disabled: true }],\n      categoryOption: null\n    }\n  },\n  methods: { \n    \n\n    sizeCardToUse (val) {\n      this.$store.dispatch('sizeCardToUse', val)\n\n       // Analytics\n      this.$ga.event({\n        eventCategory: 'Manage_Collection',\n        eventAction: 'Size_Watch_Card_Selection',\n        eventLabel: \"Using (\" + val + \") Watch Card Size\"\n      })\n    },\n\n    toggleIsManagingCollection () {\n      this.resetCollectionFilter()\n      this.$store.dispatch('toggleIsManagingCollection')\n      this.$store.dispatch('toggleIsDragToOrganize', false)\n\n       // Analytics\n      this.$ga.event({\n        eventCategory: 'Manage_Collection_Btn',\n        eventAction: 'Manage_Collection_Btn_Toggle',\n        eventLabel: this.$store.state.isManagingCollection ? 'true' : 'false'\n      })\n    },\n\n    selectSortCategory (eventLabel) {\n      this.searchTermToFilterBy = ''\n      this.sortCategory = eventLabel\n      this.categoryOption = null\n\n      switch (eventLabel) {\n        case 'condition':\n          this.categoryOptions = [\n            { value: null, text: 'Category', disabled: true },\n            { value: 8, text: '8-10' },\n            { value: 5, text: '5-7' },\n            { value: 1, text: '0-4' }\n          ]\n          break\n        case 'status':\n          this.categoryOptions = [\n            { value: null, text: 'Category', disabled: true },\n            { value: 'keeper', text: 'Keeper' },\n            { value: 'sale', text: 'For Sale' },\n            { value: 'trade', text: 'For Trade' },\n            { value: 'fsot', text: 'Sale / Trade' }\n          ]\n          break\n        case 'style':\n          this.categoryOptions = [\n            { value: null, text: 'Category', disabled: true },\n            { value: 'diver', text: 'Diver' },\n            { value: 'dress', text: 'Dress' },\n            { value: 'chronograph', text: 'Chronograph' },\n            { value: 'tourbillon', text: 'Tourbillon' },\n            { value: 'black tie', text: 'Black Tie' },\n            { value: 'sport', text: 'Sport' },\n            { value: 'smart', text: 'Smart' },\n            { value: 'apple', text: 'Apple' },\n            { value: 'casual', text: 'Casual' },\n            { value: 'orienteering', text: 'Orienteering' }\n          ]\n          break\n        case 'favorites':\n          this.selectCategoryOption('all')\n          this.categoryOptions = [\n            { value: 'all', text: 'All Favorites' }\n            // { value: 'inCollection', text: 'Favorites in Collection'},\n            // { value: 'notInCollection', text: 'Favorites not in Collection'},\n            // { value: 'pastFavorites', text: 'Previous Favorites'},\n          ]\n          break\n        case 'previous':\n        //   this.searchTermToFilterBy = null\n          this.selectCategoryOption('all')\n          this.categoryOptions = [\n            { value: 'all', text: 'All Previous' }\n          ]\n          break\n        default:\n          this.sortCategory = null\n          this.categoryOption = null\n          this.categoryOptions = [{ value: null, text: 'Select Options', disabled: true }]\n      }\n    },\n\n    selectCategoryOption (eventLabel) {\n      this.categoryOption = eventLabel\n      this.filterCollection(this.sortCategory, this.categoryOption)\n    },\n\n    filterCollection (sortCategory, categoryOption) {\n      let filterObj = {\n        category: sortCategory,\n        option: categoryOption\n      }\n    //   this.$store.dispatch('isTryingShuffleWhileManage', false) \n      this.$store.dispatch('getFilteredCollection', filterObj)\n        if (sortCategory != 'previous') {\n          this.$store.dispatch('viewingPreviousWatches', false)\n      }\n\n      // Analytics\n      this.$ga.event({\n        eventCategory: 'Manage_Collection',\n        eventAction: 'Search_By_Filters',\n        eventLabel: \"Searching by filters: \" + sortCategory + ' - ' + categoryOption\n      })\n    },\n\n    filterBySearchTerm (eventLabel) {\n    if (eventLabel) {\n        // this.$store.dispatch('isTryingShuffleWhileManage', false) \n        this.$store.dispatch('getFilteredCollectionBySearchTerm', eventLabel.toLowerCase())\n      }\n      else {\n        this.$store.dispatch('viewingPreviousWatches', false)\n        this.sortCategory = null\n        this.categoryOption = null\n        this.$store.dispatch('getFilteredCollectionBySearchTerm', '')          \n      }\n\n      // Analytics\n      this.$ga.event({\n        eventCategory: 'Manage_Collection',\n        eventAction: 'Search_By_Term',\n        eventLabel: \"Searching by term: \" + eventLabel\n      })\n    },\n\n    selectRandomWatch () {\n      this.$emit('selectRandomWatch')\n    },\n\n    addNewWatch () {\n      this.$emit('addNewWatch')\n      this.isAddingWatch = true\n      this.isEditingExistingWatch = false\n    },\n\n    resetCollectionFilter () {\n      this.selectSortCategory()\n      this.$store.dispatch('viewingPreviousWatches', false)\n      this.$store.state.FilteredCollection = this.$store.state.Collection\n    }\n  },\n\n  computed: {\n    isManagingCollection: {\n      get () {\n        return this.$store.state.isManagingCollection\n      },\n      set (value) {\n        this.$store.dispatch('toggleIsManagingCollection')\n      }\n    },\n\n    isShowFlags: {\n      get () {\n        return this.$store.state.isShowFlags\n      },\n      set (value) {\n        this.$store.dispatch('toggleIsShowFlags')\n      }\n    },\n\n    isShowEditFlags: {\n      get () {\n        return this.$store.state.isShowEditFlags\n      },\n      set (value) {\n        this.$store.dispatch('toggleIsShowEditFlags', value)\n      }\n    },\n\n    isDragToOrganize: {\n      get () {\n        return this.$store.state.isDragToOrganize\n      },\n      set (value) {\n        this.$store.dispatch('toggleIsDragToOrganize', value)\n      }\n    },\n\n    currentCardSize () {\n      return this.$store.state.CurrentCardSize\n    },\n\n    // isTryingShuffle() {\n    //     return this.$store.state.isShuffleWhileManage\n    // }\n  }\n\n}\n",null]}