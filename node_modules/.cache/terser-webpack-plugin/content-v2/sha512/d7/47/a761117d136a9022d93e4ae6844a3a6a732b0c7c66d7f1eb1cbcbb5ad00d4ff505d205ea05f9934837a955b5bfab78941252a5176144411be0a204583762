{"map":"{\"version\":3,\"sources\":[\"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/base64-js/index.js\",\"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/base64-img/base64-img.js\"],\"names\":[\"exports\",\"byteLength\",\"toByteArray\",\"fromByteArray\",\"lookup\",\"revLookup\",\"Arr\",\"Uint8Array\",\"Array\",\"code\",\"i\",\"len\",\"length\",\"charCodeAt\",\"getLens\",\"b64\",\"Error\",\"validLen\",\"indexOf\",\"placeHoldersLen\",\"lens\",\"_byteLength\",\"tmp\",\"arr\",\"curByte\",\"tripletToBase64\",\"num\",\"encodeChunk\",\"uint8\",\"start\",\"end\",\"output\",\"push\",\"join\",\"extraBytes\",\"parts\",\"maxChunkLength\",\"len2\",\"fs\",\"__webpack_require__\",\"path\",\"request\",\"base64\",\"filename\",\"data\",\"extname\",\"substr\",\"toString\",\"img\",\"reg\",\"match\",\"baseType\",\"jpeg\",\"svg+xml\",\"callback\",\"util\",\"noop\",\"readFile\",\"err\",\"base64Sync\",\"readFileSync\",\"requestBase64\",\"url\",\"isBuffer\",\"res\",\"body\",\"headers\",\"destpath\",\"name\",\"result\",\"filepath\",\"writeFile\",\"encoding\",\"imgSync\",\"writeFileSync\"],\"mappings\":\"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\",\"sourcesContent\":[\"'use strict'\\n\\nexports.byteLength = byteLength\\nexports.toByteArray = toByteArray\\nexports.fromByteArray = fromByteArray\\n\\nvar lookup = []\\nvar revLookup = []\\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\\n\\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\\nfor (var i = 0, len = code.length; i < len; ++i) {\\n  lookup[i] = code[i]\\n  revLookup[code.charCodeAt(i)] = i\\n}\\n\\n// Support decoding URL-safe base64 strings, as Node.js does.\\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\\nrevLookup['-'.charCodeAt(0)] = 62\\nrevLookup['_'.charCodeAt(0)] = 63\\n\\nfunction getLens (b64) {\\n  var len = b64.length\\n\\n  if (len % 4 > 0) {\\n    throw new Error('Invalid string. Length must be a multiple of 4')\\n  }\\n\\n  // Trim off extra bytes after placeholder bytes are found\\n  // See: https://github.com/beatgammit/base64-js/issues/42\\n  var validLen = b64.indexOf('=')\\n  if (validLen === -1) validLen = len\\n\\n  var placeHoldersLen = validLen === len\\n    ? 0\\n    : 4 - (validLen % 4)\\n\\n  return [validLen, placeHoldersLen]\\n}\\n\\n// base64 is 4/3 + up to two characters of the original data\\nfunction byteLength (b64) {\\n  var lens = getLens(b64)\\n  var validLen = lens[0]\\n  var placeHoldersLen = lens[1]\\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\\n}\\n\\nfunction _byteLength (b64, validLen, placeHoldersLen) {\\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\\n}\\n\\nfunction toByteArray (b64) {\\n  var tmp\\n  var lens = getLens(b64)\\n  var validLen = lens[0]\\n  var placeHoldersLen = lens[1]\\n\\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\\n\\n  var curByte = 0\\n\\n  // if there are placeholders, only get up to the last complete 4 chars\\n  var len = placeHoldersLen > 0\\n    ? validLen - 4\\n    : validLen\\n\\n  for (var i = 0; i < len; i += 4) {\\n    tmp =\\n      (revLookup[b64.charCodeAt(i)] << 18) |\\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\\n      revLookup[b64.charCodeAt(i + 3)]\\n    arr[curByte++] = (tmp >> 16) & 0xFF\\n    arr[curByte++] = (tmp >> 8) & 0xFF\\n    arr[curByte++] = tmp & 0xFF\\n  }\\n\\n  if (placeHoldersLen === 2) {\\n    tmp =\\n      (revLookup[b64.charCodeAt(i)] << 2) |\\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\\n    arr[curByte++] = tmp & 0xFF\\n  }\\n\\n  if (placeHoldersLen === 1) {\\n    tmp =\\n      (revLookup[b64.charCodeAt(i)] << 10) |\\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\\n    arr[curByte++] = (tmp >> 8) & 0xFF\\n    arr[curByte++] = tmp & 0xFF\\n  }\\n\\n  return arr\\n}\\n\\nfunction tripletToBase64 (num) {\\n  return lookup[num >> 18 & 0x3F] +\\n    lookup[num >> 12 & 0x3F] +\\n    lookup[num >> 6 & 0x3F] +\\n    lookup[num & 0x3F]\\n}\\n\\nfunction encodeChunk (uint8, start, end) {\\n  var tmp\\n  var output = []\\n  for (var i = start; i < end; i += 3) {\\n    tmp =\\n      ((uint8[i] << 16) & 0xFF0000) +\\n      ((uint8[i + 1] << 8) & 0xFF00) +\\n      (uint8[i + 2] & 0xFF)\\n    output.push(tripletToBase64(tmp))\\n  }\\n  return output.join('')\\n}\\n\\nfunction fromByteArray (uint8) {\\n  var tmp\\n  var len = uint8.length\\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\\n  var parts = []\\n  var maxChunkLength = 16383 // must be multiple of 3\\n\\n  // go through the array every three bytes, we'll deal with trailing stuff later\\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\\n    parts.push(encodeChunk(\\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\\n    ))\\n  }\\n\\n  // pad the end with zeros, but make sure to not forget the extra bytes\\n  if (extraBytes === 1) {\\n    tmp = uint8[len - 1]\\n    parts.push(\\n      lookup[tmp >> 2] +\\n      lookup[(tmp << 4) & 0x3F] +\\n      '=='\\n    )\\n  } else if (extraBytes === 2) {\\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\\n    parts.push(\\n      lookup[tmp >> 10] +\\n      lookup[(tmp >> 4) & 0x3F] +\\n      lookup[(tmp << 2) & 0x3F] +\\n      '='\\n    )\\n  }\\n\\n  return parts.join('')\\n}\\n\",\"var fs = require('file-system');\\nvar path = require('path');\\nvar request = require('ajax-request');\\n\\nfunction base64(filename, data) {\\n  var extname = path.extname(filename).substr(1);\\n  extname = extname || 'png';\\n\\n  if (extname === 'svg') {\\n    extname = \\\"svg+xml\\\"\\n  }\\n  \\n  return 'data:image/' + extname + ';base64,' + data.toString('base64');\\n}\\n\\nfunction img(data) {\\n  var reg = /^data:image\\\\/([\\\\w+]+);base64,([\\\\s\\\\S]+)/;\\n  var match = data.match(reg);\\n  var baseType = {\\n    jpeg: 'jpg'\\n  };\\n\\n  baseType['svg+xml'] = 'svg'\\n\\n  if (!match) {\\n    throw new Error('image base64 data error');\\n  }\\n\\n  var extname = baseType[match[1]] ? baseType[match[1]] : match[1];\\n\\n  return {\\n    extname: '.' + extname,\\n    base64: match[2]\\n  };\\n}\\n\\n/**\\n * @description\\n * Get image file base64 data\\n * @example\\n * base64Img.base64('path/demo.png', function(err, data) {})\\n */\\nexports.base64 = function(filename, callback) {\\n  if (!callback) callback = util.noop;\\n\\n  fs.readFile(filename, function(err, data) {\\n    if (err) return callback(err);\\n\\n    callback(null, base64(filename, data));\\n  });\\n};\\n\\n/**\\n * @description\\n * The api same as base64, but it's synchronous\\n * @example\\n * var data = base64Img.base64Sync('path/demo.png');\\n */\\nexports.base64Sync = function(filename) {\\n  var data = fs.readFileSync(filename);\\n\\n  return base64(filename, data);\\n};\\n\\n/**\\n * @description\\n * Get base64 from url\\n * @example\\n * request.base64(\\n *   'http://webresource.c-ctrip.com/ResCRMOnline/R5/html5/images/57.png', \\n *   function(err, res, body) {\\n * \\n *   }\\n * );\\n */\\nexports.requestBase64 = function(url, callback) {\\n  request({\\n    url: url,\\n    isBuffer: true\\n  }, function (err, res, body) {\\n    if (err) return callback(err);\\n\\n    var data = 'data:' + res.headers['content-type'] + ';base64,' + body.toString('base64');\\n    callback(err, res, data);\\n  });\\n};\\n\\n/**\\n * @description\\n * Convert image base64 data to img\\n * @example\\n * base64Img.img('data:image/png;base64,...', 'dest', '1', function(err, filepath) {});\\n */\\nexports.img = function(data, destpath, name, callback) {\\n  var result = img(data);\\n  var filepath = path.join(destpath, name + result.extname);\\n\\n  fs.writeFile(filepath, result.base64, { encoding: 'base64' }, function(err) {\\n    callback(err, filepath);\\n  });\\n};\\n\\n/**\\n * @description\\n * The api same as img, but it's synchronous\\n * @example\\n * var filepath = base64Img.imgSync('data:image/png;base64,...', 'dest', '1');\\n */\\nexports.imgSync = function(data, destpath, name) {\\n  var result = img(data);\\n  var filepath = path.join(destpath, name + result.extname);\\n\\n  fs.writeFileSync(filepath, result.base64, { encoding: 'base64' });\\n  return filepath;\\n};\"]}","code":"(window[\"webpackJsonp\"]=window[\"webpackJsonp\"]||[]).push([[\"chunk-vendors~62ab6885\"],{\"1fb5\":function(n,r,e){\"use strict\";r.byteLength=s,r.toByteArray=h,r.fromByteArray=b;for(var t=[],a=[],o=\"undefined\"!==typeof Uint8Array?Uint8Array:Array,i=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",u=0,c=i.length;u<c;++u)t[u]=i[u],a[i.charCodeAt(u)]=u;function f(n){var r=n.length;if(r%4>0)throw new Error(\"Invalid string. Length must be a multiple of 4\");var e=n.indexOf(\"=\");-1===e&&(e=r);var t=e===r?0:4-e%4;return[e,t]}function s(n){var r=f(n),e=r[0],t=r[1];return 3*(e+t)/4-t}function d(n,r,e){return 3*(r+e)/4-e}function h(n){for(var r,e=f(n),t=e[0],i=e[1],u=new o(d(n,t,i)),c=0,s=i>0?t-4:t,h=0;h<s;h+=4)r=a[n.charCodeAt(h)]<<18|a[n.charCodeAt(h+1)]<<12|a[n.charCodeAt(h+2)]<<6|a[n.charCodeAt(h+3)],u[c++]=r>>16&255,u[c++]=r>>8&255,u[c++]=255&r;return 2===i&&(r=a[n.charCodeAt(h)]<<2|a[n.charCodeAt(h+1)]>>4,u[c++]=255&r),1===i&&(r=a[n.charCodeAt(h)]<<10|a[n.charCodeAt(h+1)]<<4|a[n.charCodeAt(h+2)]>>2,u[c++]=r>>8&255,u[c++]=255&r),u}function g(n){return t[n>>18&63]+t[n>>12&63]+t[n>>6&63]+t[63&n]}function v(n,r,e){for(var t,a=[],o=r;o<e;o+=3)t=(n[o]<<16&16711680)+(n[o+1]<<8&65280)+(255&n[o+2]),a.push(g(t));return a.join(\"\")}function b(n){for(var r,e=n.length,a=e%3,o=[],i=16383,u=0,c=e-a;u<c;u+=i)o.push(v(n,u,u+i>c?c:u+i));return 1===a?(r=n[e-1],o.push(t[r>>2]+t[r<<4&63]+\"==\")):2===a&&(r=(n[e-2]<<8)+n[e-1],o.push(t[r>>10]+t[r>>4&63]+t[r<<2&63]+\"=\")),o.join(\"\")}a[\"-\".charCodeAt(0)]=62,a[\"_\".charCodeAt(0)]=63},\"2dd8\":function(n,r,e){},d9cd:function(n,r,e){var t=e(\"880b\"),a=e(\"df7c\"),o=e(\"1a4f\");function i(n,r){var e=a.extname(n).substr(1);return e=e||\"png\",\"svg\"===e&&(e=\"svg+xml\"),\"data:image/\"+e+\";base64,\"+r.toString(\"base64\")}function u(n){var r=/^data:image\\/([\\w+]+);base64,([\\s\\S]+)/,e=n.match(r),t={jpeg:\"jpg\",\"svg+xml\":\"svg\"};if(!e)throw new Error(\"image base64 data error\");var a=t[e[1]]?t[e[1]]:e[1];return{extname:\".\"+a,base64:e[2]}}r.base64=function(n,r){r||(r=util.noop),t.readFile(n,function(e,t){if(e)return r(e);r(null,i(n,t))})},r.base64Sync=function(n){var r=t.readFileSync(n);return i(n,r)},r.requestBase64=function(n,r){o({url:n,isBuffer:!0},function(n,e,t){if(n)return r(n);var a=\"data:\"+e.headers[\"content-type\"]+\";base64,\"+t.toString(\"base64\");r(n,e,a)})},r.img=function(n,r,e,o){var i=u(n),c=a.join(r,e+i.extname);t.writeFile(c,i.base64,{encoding:\"base64\"},function(n){o(n,c)})},r.imgSync=function(n,r,e){var o=u(n),i=a.join(r,e+o.extname);return t.writeFileSync(i,o.base64,{encoding:\"base64\"}),i}}}]);","extractedComments":[]}