{"map":"{\"version\":3,\"sources\":[\"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/file-system/file-system.js\",\"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/file-match/file-match.js\"],\"names\":[\"fs\",\"__webpack_require__\",\"util\",\"path\",\"fileMatch\",\"checkCbAndOpts\",\"options\",\"callback\",\"isFunction\",\"isObject\",\"noop\",\"getExists\",\"filepath\",\"exists\",\"existsSync\",\"dirname\",\"extend\",\"exports\",\"mkdir\",\"mode\",\"root\",\"children\",\"relative\",\"create\",\"count\",\"length\",\"join\",\"err\",\"split\",\"sep\",\"mkdirSync\",\"forEach\",\"item\",\"writeFile\",\"filename\",\"data\",\"result\",\"writeFileSync\",\"copyFile\",\"srcpath\",\"destpath\",\"encoding\",\"done\",\"process\",\"readFile\",\"contents\",\"copyFileSync\",\"readFileSync\",\"recurse\",\"dirpath\",\"filter\",\"filterCb\",\"rootpath\",\"readdir\",\"files\",\"stat\",\"stats\",\"flag\",\"isDirectory\",\"recurseSync\",\"readdirSync\",\"statSync\",\"rmdirSync\",\"unlinkSync\",\"copySync\",\"noProcess\",\"noProcessCb\",\"newpath\",\"opts\",\"ignore\",\"isArray\",\"isString\",\"match\",\"negate\",\"isIgnore\",\"isNegate\",\"indexOf\",\"replace\",\"$1\",\"$2\",\"collection\",\"index\",\"trim\",\"push\",\"RegExp\",\"unixifyPath\",\"test\",\"module\"],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * @fileoverview Strengthen the ability of file system\\n * @author wliao <wliao@Ctrip.com> \\n */\\nvar fs = require('fs');\\nvar util = require('utils-extend');\\nvar path = require('path');\\nvar fileMatch = require('file-match');\\n\\nfunction checkCbAndOpts(options, callback) {\\n  if (util.isFunction(options)) {\\n    return {\\n      options: null,\\n      callback: options\\n    };\\n  } else if (util.isObject(options)) {\\n    return {\\n      options: options,\\n      callback: callback\\n    };\\n  } else {\\n    return {\\n      options: null,\\n      callback: util.noop\\n    };\\n  }\\n}\\n\\nfunction getExists(filepath) {\\n  var exists = fs.existsSync(filepath);\\n\\n  if (exists) {\\n    return filepath;\\n  } else {\\n    return getExists(path.dirname(filepath));\\n  }\\n}\\n\\nutil.extend(exports, fs);\\n\\n/**\\n * @description\\n * Assign node origin methods to fs\\n */\\nexports.fs = fs;\\n\\nexports.fileMatch = fileMatch;\\n\\n/**\\n * @description\\n * Create dir, if dir exist, it will only invoke callback.\\n *\\n * @example\\n * ```js\\n *   fs.mkdir('1/2/3/4/5', 511);\\n *   fs.mkdir('path/2/3', function() {});\\n * ```\\n */\\nexports.mkdir = function(filepath, mode, callback) {\\n  var root = getExists(filepath);\\n  var children  = path.relative(root, filepath);\\n\\n  if (util.isFunction(mode)) {\\n    callback = mode;\\n    mode = null;\\n  }\\n\\n  if (!util.isFunction(callback)) {\\n    callback = util.noop;\\n  }\\n\\n  mode = mode || 511;\\n\\n  if (!children) return callback();\\n\\n  children = children.split(path.sep);\\n\\n  function create(filepath) {\\n    if (create.count === children.length) {\\n      return callback();\\n    }\\n\\n    filepath = path.join(filepath, children[create.count]);\\n\\n    fs.mkdir(filepath, mode, function(err) {\\n      create.count++;\\n      create(filepath);\\n    });\\n  }\\n\\n  create.count = 0;\\n  create(root);\\n};\\n\\n/**\\n * @description\\n * Same as mkdir, but it is synchronous\\n */\\nexports.mkdirSync = function(filepath, mode) {\\n  var root = getExists(filepath);\\n  var children  = path.relative(root, filepath);\\n\\n  if (!children) return;\\n\\n  children = children.split(path.sep);\\n\\n  children.forEach(function(item) {\\n    root = path.join(root, item);\\n    fs.mkdirSync(root, mode);\\n  });\\n};\\n\\n/**\\n * @description \\n * Create file, if path don't exists, it will not throw error.\\n * And will mkdir for path, it is asynchronous\\n * \\n * @example\\n * ```js\\n *   fs.writeFile('path/filename.txt', 'something')\\n *   fs.writeFile('path/filename.txt', 'something', {})\\n * ```\\n */\\nexports.writeFile = function(filename, data, options, callback) {\\n  var result = checkCbAndOpts(options, callback);\\n  var dirname = path.dirname(filename);\\n  options = result.options;\\n  callback = result.callback;\\n\\n  // Create dir first\\n  exports.mkdir(dirname, function() {\\n    fs.writeFile(filename, data, options, callback);\\n  });\\n};\\n\\n/**\\n * @description\\n * Same as writeFile, but it is synchronous\\n */\\nexports.writeFileSync = function(filename, data, options) {\\n  var dirname = path.dirname(filename);\\n\\n  exports.mkdirSync(dirname);\\n  fs.writeFileSync(filename, data, options);\\n};\\n\\n/**\\n * @description\\n * Asynchronously copy a file\\n * @example\\n * file.copyFile('demo.txt', 'demo.dest.txt', { done: function(err) { }})\\n */\\nexports.copyFile = function(srcpath, destpath, options) {\\n  options = util.extend({\\n    encoding: 'utf8',\\n    done: util.noop\\n  }, options || {});\\n\\n  if (!options.process) {\\n    options.encoding = null;\\n  }\\n\\n  fs.readFile(srcpath, {\\n    encoding: options.encoding\\n  }, function(err, contents) {\\n    if (err) return options.done(err);\\n\\n    if (options.process) {\\n      contents = options.process(contents);\\n    }\\n\\n    exports.writeFile(destpath, contents, options, options.done);\\n  });\\n};\\n\\n/**\\n * @description\\n * Copy file to dest, if no process options, it will only copy file to dest\\n * @example\\n * file.copyFileSync('demo.txt', 'demo.dest.txt' { process: function(contents) { }});\\n * file.copyFileSync('demo.png', 'dest.png');\\n */\\nexports.copyFileSync = function(srcpath, destpath, options) {\\n  options = util.extend({\\n    encoding: 'utf8' \\n  }, options || {});\\n  var contents;\\n\\n  if (options.process) {\\n    contents = fs.readFileSync(srcpath, options);\\n    contents = options.process(contents, srcpath, options.relative);\\n\\n    if (util.isObject(contents) && contents.filepath) {\\n      destpath = contents.filepath;\\n      contents = contents.contents;\\n    }\\n\\n    exports.writeFileSync(destpath, contents, options);    \\n  } else {\\n    contents = fs.readFileSync(srcpath);\\n    exports.writeFileSync(destpath, contents);\\n  }\\n};\\n\\n/**\\n * @description\\n * Recurse into a directory, executing callback for each file and folder\\n * if the filename is undefiend, the callback is for folder, otherwise for file.\\n * and it is asynchronous\\n * @example\\n * file.recurse('path', function(filepath, filename) { });\\n * file.recurse('path', ['*.js', 'path/**\\\\/*.html'], function(filepath, relative, filename) { });\\n */\\nexports.recurse = function(dirpath, filter, callback) {\\n  if (util.isFunction(filter)) {\\n    callback = filter;\\n    filter = null;\\n  }\\n  var filterCb = fileMatch(filter);\\n  var rootpath = dirpath;\\n\\n  function recurse(dirpath) {\\n    fs.readdir(dirpath, function(err, files) {\\n      if (err) return callback(err);\\n\\n      files.forEach(function(filename) {\\n        var filepath = path.join(dirpath, filename);\\n\\n        fs.stat(filepath, function(err, stats) {\\n            var relative = path.relative(rootpath, filepath);\\n            var flag = filterCb(relative);\\n\\n            if (stats.isDirectory()) {\\n              recurse(filepath);\\n              if (flag) callback(filepath, relative);\\n            } else {\\n              if (flag) callback(filepath, relative, filename);\\n            }\\n          });\\n        });\\n    });\\n  }\\n\\n  recurse(dirpath);\\n};\\n\\n/**\\n * @description\\n * Same as recurse, but it is synchronous\\n * @example\\n * file.recurseSync('path', function(filepath, filename) {});\\n * file.recurseSync('path', ['*.js', 'path/**\\\\/*.html'], function(filepath, relative, filename) {});\\n */\\nexports.recurseSync = function(dirpath, filter, callback) {\\n  if (util.isFunction(filter)) {\\n    callback = filter;\\n    filter = null;\\n  }\\n  var filterCb = fileMatch(filter);\\n  var rootpath = dirpath;\\n\\n  function recurse(dirpath) {\\n    fs.readdirSync(dirpath).forEach(function(filename) {\\n      var filepath = path.join(dirpath, filename);\\n      var stats = fs.statSync(filepath);\\n      var relative = path.relative(rootpath, filepath);\\n      var flag = filterCb(relative);\\n\\n      if (stats.isDirectory()) {\\n        recurse(filepath);\\n        if (flag) callback(filepath, relative);\\n      } else {\\n        if (flag) callback(filepath, relative, filename);\\n      }\\n    });\\n  }\\n\\n  recurse(dirpath);\\n};\\n\\n/**\\n * @description\\n * Remove folder and files in folder, but it's synchronous\\n * @example\\n * file.rmdirSync('path');\\n */\\nexports.rmdirSync = function(dirpath) {\\n  exports.recurseSync(dirpath, function(filepath, relative, filename) {\\n    // it is file, otherwise it's folder\\n    if (filename) {\\n      fs.unlinkSync(filepath);\\n    } else {\\n      fs.rmdirSync(filepath);\\n    }\\n  });\\n\\n  fs.rmdirSync(dirpath);\\n};\\n\\n/**\\n * @description\\n * Copy dirpath to destpath, pass process callback for each file hanlder\\n * if you want to change the dest filepath, process callback return { contents: '', filepath: ''}\\n * otherwise only change contents\\n * @example\\n * file.copySync('path', 'dest');\\n * file.copySync('src', 'dest/src');\\n * file.copySync('path', 'dest', { process: function(contents, filepath) {} });\\n * file.copySync('path', 'dest', { process: function(contents, filepath) {} }, noProcess: ['']);\\n */\\nexports.copySync = function(dirpath, destpath, options) {\\n  options = util.extend({\\n    encoding: 'utf8',\\n    filter: null,\\n    noProcess: ''\\n  }, options || {});\\n  var noProcessCb = fileMatch(options.noProcess);\\n\\n  // Make sure dest root\\n  exports.mkdirSync(destpath);\\n  exports.recurseSync(dirpath, options.filter, function(filepath, relative, filename) {\\n    if (!filename) return;\\n    var newpath = path.join(destpath, relative);\\n    var opts = {\\n      relative: relative\\n    };\\n\\n    if (options.process && !noProcessCb(relative)) {\\n      opts.encoding = options.encoding;\\n      opts.process = options.process;\\n    }\\n\\n    exports.copyFileSync(filepath, newpath, opts);\\n  });\\n};\",\"var util = require('utils-extend');\\n/**\\n * @description\\n * @example\\n * `**\\\\/*` match all files\\n * `*.js`  only match current dir files\\n * '**\\\\/*.js' match all js files\\n * 'path/*.js' match js files in path\\n * '!*.js' exclude js files \\n */\\nfunction fileMatch(filter, ignore) {\\n  if (filter === null) {\\n    return function() {\\n      return true;\\n    };\\n  } else if (filter === '' || (util.isArray(filter) && !filter.length)) {\\n    return function() {\\n      return false;\\n    };\\n  }\\n\\n  if (util.isString(filter)) {\\n    filter = [filter];\\n  }\\n\\n  var match = [];\\n  var negate = [];\\n  var isIgnore = ignore ? 'i' : '';\\n\\n  filter.forEach(function(item) {\\n    var isNegate = item.indexOf('!') === 0;\\n    item = item\\n      .replace(/^!/, '')\\n      .replace(/\\\\*(?![\\\\/*])/, '[^/]*?')\\n      .replace('**\\\\/', '([^/]+\\\\/)*')\\n      .replace(/\\\\{([^\\\\}]+)\\\\}/g, function($1, $2) {\\n        var collection = $2.split(',');\\n        var length = collection.length;\\n        var result = '(?:';\\n\\n        collection.forEach(function(item, index) {\\n          result += '(' + item.trim() + ')';\\n\\n          if (index + 1 !== length) {\\n            result += '|';\\n          }\\n        });\\n\\n        result += ')';\\n\\n        return result;\\n      })\\n      .replace(/([\\\\/\\\\.])/g, '\\\\\\\\$1');\\n\\n    item = '(^' + item + '$)';\\n\\n    if (isNegate) {\\n      negate.push(item);\\n    } else {\\n      match.push(item);\\n    }\\n  });\\n\\n  match = match.length ?  new RegExp(match.join('|'), isIgnore) : null;\\n  negate = negate.length ? new RegExp(negate.join('|'), isIgnore) : null;\\n\\n  return function(filepath) {\\n    // Normalize \\\\\\\\ paths to / paths.\\n    filepath = util.path.unixifyPath(filepath);\\n\\n    if (negate && negate.test(filepath)) {\\n      return false;\\n    }\\n\\n    if (match && match.test(filepath)) {\\n      return true;\\n    }\\n\\n    return false;\\n  };\\n}\\n\\nmodule.exports = fileMatch;\"]}","code":"(window[\"webpackJsonp\"]=window[\"webpackJsonp\"]||[]).push([[\"chunk-vendors~def4f26a\"],{\"880b\":function(n,i,e){var c=e(\"3e8f\"),r=e(\"ddd8\"),t=e(\"df7c\"),o=e(\"ae7e\");function u(n,i){return r.isFunction(n)?{options:null,callback:n}:r.isObject(n)?{options:n,callback:i}:{options:null,callback:r.noop}}function l(n){var i=c.existsSync(n);return i?n:l(t.dirname(n))}r.extend(i,c),i.fs=c,i.fileMatch=o,i.mkdir=function(n,i,e){var o=l(n),u=t.relative(o,n);if(r.isFunction(i)&&(e=i,i=null),r.isFunction(e)||(e=r.noop),i=i||511,!u)return e();function a(n){if(a.count===u.length)return e();n=t.join(n,u[a.count]),c.mkdir(n,i,function(i){a.count++,a(n)})}u=u.split(t.sep),a.count=0,a(o)},i.mkdirSync=function(n,i){var e=l(n),r=t.relative(e,n);r&&(r=r.split(t.sep),r.forEach(function(n){e=t.join(e,n),c.mkdirSync(e,i)}))},i.writeFile=function(n,e,r,o){var l=u(r,o),a=t.dirname(n);r=l.options,o=l.callback,i.mkdir(a,function(){c.writeFile(n,e,r,o)})},i.writeFileSync=function(n,e,r){var o=t.dirname(n);i.mkdirSync(o),c.writeFileSync(n,e,r)},i.copyFile=function(n,e,t){t=r.extend({encoding:\"utf8\",done:r.noop},t||{}),t.process||(t.encoding=null),c.readFile(n,{encoding:t.encoding},function(n,c){if(n)return t.done(n);t.process&&(c=t.process(c)),i.writeFile(e,c,t,t.done)})},i.copyFileSync=function(n,e,t){var o;t=r.extend({encoding:\"utf8\"},t||{}),t.process?(o=c.readFileSync(n,t),o=t.process(o,n,t.relative),r.isObject(o)&&o.filepath&&(e=o.filepath,o=o.contents),i.writeFileSync(e,o,t)):(o=c.readFileSync(n),i.writeFileSync(e,o))},i.recurse=function(n,i,e){r.isFunction(i)&&(e=i,i=null);var u=o(i),l=n;function a(n){c.readdir(n,function(i,r){if(i)return e(i);r.forEach(function(i){var r=t.join(n,i);c.stat(r,function(n,c){var o=t.relative(l,r),f=u(o);c.isDirectory()?(a(r),f&&e(r,o)):f&&e(r,o,i)})})})}a(n)},i.recurseSync=function(n,i,e){r.isFunction(i)&&(e=i,i=null);var u=o(i),l=n;function a(n){c.readdirSync(n).forEach(function(i){var r=t.join(n,i),o=c.statSync(r),f=t.relative(l,r),s=u(f);o.isDirectory()?(a(r),s&&e(r,f)):s&&e(r,f,i)})}a(n)},i.rmdirSync=function(n){i.recurseSync(n,function(n,i,e){e?c.unlinkSync(n):c.rmdirSync(n)}),c.rmdirSync(n)},i.copySync=function(n,e,c){c=r.extend({encoding:\"utf8\",filter:null,noProcess:\"\"},c||{});var u=o(c.noProcess);i.mkdirSync(e),i.recurseSync(n,c.filter,function(n,r,o){if(o){var l=t.join(e,r),a={relative:r};c.process&&!u(r)&&(a.encoding=c.encoding,a.process=c.process),i.copyFileSync(n,l,a)}})}},ae7e:function(n,i,e){var c=e(\"ddd8\");function r(n,i){if(null===n)return function(){return!0};if(\"\"===n||c.isArray(n)&&!n.length)return function(){return!1};c.isString(n)&&(n=[n]);var e=[],r=[],t=i?\"i\":\"\";return n.forEach(function(n){var i=0===n.indexOf(\"!\");n=n.replace(/^!/,\"\").replace(/\\*(?![\\/*])/,\"[^/]*?\").replace(\"**/\",\"([^/]+/)*\").replace(/\\{([^\\}]+)\\}/g,function(n,i){var e=i.split(\",\"),c=e.length,r=\"(?:\";return e.forEach(function(n,i){r+=\"(\"+n.trim()+\")\",i+1!==c&&(r+=\"|\")}),r+=\")\",r}).replace(/([\\/\\.])/g,\"\\\\$1\"),n=\"(^\"+n+\"$)\",i?r.push(n):e.push(n)}),e=e.length?new RegExp(e.join(\"|\"),t):null,r=r.length?new RegExp(r.join(\"|\"),t):null,function(n){return n=c.path.unixifyPath(n),(!r||!r.test(n))&&!(!e||!e.test(n))}}n.exports=r}}]);","extractedComments":[]}