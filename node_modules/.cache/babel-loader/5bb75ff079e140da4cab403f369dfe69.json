{"remainingRequest":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/thread-loader/dist/cjs.js!/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/babel-loader/lib/index.js!/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/src/components/Profile/Collection/Collection.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/src/components/Profile/Collection/Collection.vue","mtime":1551106275957},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/cache-loader/dist/cjs.js","mtime":1548990847448},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/thread-loader/dist/cjs.js","mtime":1548990850389},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/babel-loader/lib/index.js","mtime":1548990846981},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/cache-loader/dist/cjs.js","mtime":1548990847448},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/vue-loader/lib/index.js","mtime":1548990850526}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport _defineProperty from \"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nimport SeeMoreModal from './Modals/SeeMoreModal.vue';\nimport AddWatchModal from './Modals/AddWatchModal.vue';\nimport DraggableWatchCollection from './DraggableWatchCollection.vue';\nimport NonDraggableWatchCollection from './NonDraggableWatchCollection.vue';\nimport ManageCollection from './ManageCollection.vue';\nimport { setTimeout } from 'timers';\nimport loader from '../../Loader.vue';\nimport LoadImageUtility from '../../../Utilities/LoadImageUtility';\nimport ImgBase64 from 'base64-img';\nexport default {\n  components: {\n    seeMoreModal: SeeMoreModal,\n    addWatchModal: AddWatchModal,\n    draggableWatchCollection: DraggableWatchCollection,\n    nonDraggableWatchCollection: NonDraggableWatchCollection,\n    manageCollection: ManageCollection,\n    loader: loader\n  },\n  data: function data() {\n    return {\n      isS3UploadEvent: false,\n      isChangedOrder: false,\n      addWatchCount: 1,\n      showDismissibleAlert: false,\n      isAddingWatch: false,\n      isEditingExistingWatch: false,\n      selectedWatch: {},\n      isSeeMore: false,\n      addWatch: {\n        src: {\n          images: []\n        }\n      },\n      addWatchImages: [],\n      isFeaturedWatch: false,\n      hasCollection: false,\n      searchTerms: ['brand', 'name', 'model', 'ref']\n    };\n  },\n  methods: {\n    uploadImagesToAwsS3: function uploadImagesToAwsS3() {\n      var _this = this;\n\n      var files = this.addWatch.src.images;\n      this.addWatchCount++;\n      this.S3UploadEventListener(true);\n      var fileArr = [];\n      files.forEach(function (file) {\n        if (!LoadImageUtility.ContainsS3Information(file.src.substring(0, 30))) {\n          //   console.log('new image, so going to save base 64 to s3', file)\n          fileArr.push({\n            src: file.src // fileName: file.fileName\n\n          });\n        }\n      });\n\n      if (fileArr[0]) {\n        // console.log('There are new images to upload, so I will upload this array of base 64 images to s3', fileArr, this.addWatch.src.images.length)\n        this.$store.dispatch('uploadImagesToAwsS3', fileArr).then(function (images) {\n          var tempArr = _this.addWatch.src.images.concat(images);\n\n          var imagesCount = 0;\n\n          for (var i = 0; i < tempArr.length; i++) {\n            if (!LoadImageUtility.ContainsS3Information(tempArr[i].src.substring(0, 30))) {\n              // if the src property on the index of the current array does not contaain S3 information\n              tempArr[i].src = images[imagesCount].src; // tempArr[i].order = i\n\n              imagesCount++;\n            }\n          }\n\n          imagesCount = 0; // this.addWatch.src.images = tempArr\n\n          _this.S3UploadEventListener(false);\n\n          fileArr = []; // console.log('got this back', images)\n          //     let currentArr = this.addWatch.src.images\n          //     // images.forEach(s3Img => { // for each new s3 image check the current images for the next non s3 image str, map it\n          //     for (let j = 0; j < images.length; j++) {\n          //         for (let i = 0; i < currentArr.length; i++) {\n          //             if (!LoadImageUtility.ContainsS3Information(currentArr[i].src.substring(0, 30))) { // if the current img is not a S3 bucket string, let's make it one\n          //                     console.log('its new!!',currentArr[i].src, 'to become',  images[j].Location)\n          //                     currentArr[i].src = images[j].Location\n          //                     currentArr[i].order = i\n          //                     currentArr[i].fileName = images[j].fileName\n          //                     break\n          //                 }\n          //             }\n          //         }\n          // this.addWatch.src.images = currentArr\n        }).catch(function (err) {\n          console.log(err);\n\n          _this.S3UploadEventListener(false);\n        });\n      } else {\n        this.S3UploadEventListener(false);\n      }\n    },\n    S3UploadEventListener: function S3UploadEventListener(value) {\n      this.isS3UploadEvent = value;\n    },\n    selectWatch: function selectWatch(watch) {\n      this.selectedWatch = watch;\n      this.$refs.seeMoreModal.show(); //   this.$store.dispatch('ToggleIsModalPopped', true)\n      // Analytics\n\n      this.$ga.event({\n        eventCategory: 'Watch_Collection',\n        eventAction: 'See_More_Modal_Click',\n        eventLabel: 'Open See More Watch Modal'\n      });\n    },\n    editWatchModal: function editWatchModal(watch) {\n      this.addWatch = watch;\n      this.isAddingWatch = false;\n      this.isEditingExistingWatch = true;\n      this.addWatch.name = this.titleCase(watch.name);\n      this.addWatch.brand = this.titleCase(watch.brand);\n      this.$refs.addWatchModal.show(); //   this.$store.dispatch('ToggleIsModalPopped', true)\n      // Analytics\n\n      this.$ga.event({\n        eventCategory: 'Manage_Collection',\n        eventAction: 'Edit_Watch_Modal_Click',\n        eventLabel: 'Begin Editing Watch'\n      });\n    },\n    OpenWotdSeeMore: function OpenWotdSeeMore(watchId) {\n      var watch = this.Collection.find(function (x) {\n        return x.id === watchId;\n      });\n      this.selectWatch(watch);\n      this.$ga.event({\n        eventCategory: 'Watch_Collection',\n        eventAction: 'WOTD_Btn_Click',\n        eventLabel: 'WOTD + See More Watch Modal'\n      });\n    },\n    SelectRandomWatch: function SelectRandomWatch() {\n      var max = this.Collection.length;\n      var min = 0;\n      var index = Math.floor(Math.random() * (max - min) + min);\n      var randomWatch = this.Collection[index];\n      this.selectWatch(randomWatch); // Analytics\n\n      this.$ga.event({\n        eventCategory: 'Manage_Collection',\n        eventAction: 'Random_Watch_Btn_Click',\n        eventLabel: 'Random Watch + See More Watch Modal'\n      });\n    },\n    addWatchModal: function addWatchModal() {\n      this.createAddWatch();\n      this.isAddingWatch = true;\n      this.isEditingExistingWatch = false;\n      this.$refs.addWatchModal.show(); //   this.$store.dispatch('ToggleIsModalPopped', true)\n      // Analytics\n\n      this.$ga.event({\n        eventCategory: 'Manage_Collection',\n        eventAction: 'Add_Watch_Btn_Click',\n        eventLabel: 'Begin Adding Watch'\n      });\n    },\n    resetWatchFormAndModals: function resetWatchFormAndModals() {\n      this.isAddingWatch = false;\n      this.isEditingExistingWatch = false;\n      this.$refs.addWatchModal.hide();\n      this.$refs.seeMoreModal.hide(); //   this.$store.dispatch('ToggleIsModalPopped', false) // Modals closed\n\n      this.addWatch = this.addWatch;\n      this.addWatchCount = 1;\n    },\n    previewWatch: function previewWatch() {\n      if (this.addWatch.brand) {\n        this.addWatch.brand = this.addWatch.brand.toLowerCase();\n      }\n\n      this.addWatch.name = this.addWatch.name.toLowerCase();\n      this.selectedWatch = this.addWatch;\n      this.$refs.seeMoreModal.show(); //   this.$store.dispatch('ToggleIsModalPopped', true)\n      // Analytics\n\n      this.$ga.event({\n        eventCategory: 'Manage_Collection',\n        eventAction: 'Add_Watch_Modal_Click',\n        eventLabel: 'Preview Adding Watch'\n      });\n    },\n    submitWatch: function submitWatch() {\n      var _this2 = this;\n\n      this.$refs.addWatchModal.hide();\n      this.isAddingWatch = false;\n      this.isEditingExistingWatch = false;\n      this.$refs.seeMoreModal.hide(); //   this.$store.dispatch('ToggleIsModalPopped', false)\n\n      if (!this.addWatch.id) {\n        // watch doesnt exist yet, create new watch\n        this.$store.dispatch('submitNewWatch', this.addWatch);\n\n        if (this.$store.state.DelayPrompt) {\n          this.$store.state.DelayPrompt.prompt();\n          this.$store.state.DelayPrompt.userChoice.then(function (selection) {\n            if (selection.outcome === 'accepted') {\n              _this2.$ga.event({\n                eventCategory: 'PWA Banner Prompt',\n                eventAction: 'Accept Banner'\n              });\n            } else {\n              _this2.$ga.event({\n                eventCategory: 'PWA Banner Prompt',\n                eventAction: 'Decline Banner'\n              });\n            }\n          });\n        }\n\n        this.$ga.event({\n          eventCategory: 'Manage_Collection',\n          eventAction: 'Add_Watch_Modal_Click',\n          eventLabel: 'Submit New Watch'\n        });\n      } else {\n        // editing existing watch\n        this.$store.dispatch('submitEditWatch', this.addWatch);\n        this.$ga.event({\n          eventCategory: 'Manage_Collection',\n          eventAction: 'Edit_Watch_Modal_Click',\n          eventLabel: 'Submit Edit Watch'\n        });\n      }\n\n      this.createAddWatch(); // reset add watch to defaults\n\n      this.addWatchCount = 1; // resets watch count\n    },\n    backToEditStart: function backToEditStart() {\n      this.addWatchCount = 1;\n      this.$refs.addWatchModal.show();\n      this.$refs.seeMoreModal.hide();\n      this.$ga.event({\n        eventCategory: 'Manage_Collection',\n        eventAction: 'Add_Watch_Modal_Click',\n        eventLabel: 'Restart Editing Watch'\n      });\n    },\n    createAddWatch: function createAddWatch() {\n      var _this$addWatch;\n\n      this.addWatch = (_this$addWatch = {\n        src: {\n          images: []\n        },\n        brand: '',\n        name: '',\n        isForSale: false,\n        isForTrade: false,\n        isFullKit: false,\n        watchStyle: null\n      }, _defineProperty(_this$addWatch, \"watchStyle\", null), _defineProperty(_this$addWatch, \"accuracy\", null), _defineProperty(_this$addWatch, \"movement\", null), _defineProperty(_this$addWatch, \"movementType\", null), _defineProperty(_this$addWatch, \"sizeLugToLug\", null), _defineProperty(_this$addWatch, \"sizeWidth\", null), _defineProperty(_this$addWatch, \"sizeHeight\", null), _defineProperty(_this$addWatch, \"crystal\", null), _defineProperty(_this$addWatch, \"band\", ''), _defineProperty(_this$addWatch, \"model\", ''), _defineProperty(_this$addWatch, \"ref\", ''), _defineProperty(_this$addWatch, \"forSalePrice\", null), _defineProperty(_this$addWatch, \"forTradeValue\", null), _defineProperty(_this$addWatch, \"acquiredFor\", null), _defineProperty(_this$addWatch, \"dateAcquired\", ''), _this$addWatch);\n    },\n    orderChanged: function orderChanged() {\n      this.isChangedOrder = true;\n    },\n    titleCase: function titleCase(str) {\n      var splitStr = str.toLowerCase().split(' ');\n\n      for (var i = 0; i < splitStr.length; i++) {\n        splitStr[i] = splitStr[i].charAt(0).toUpperCase() + splitStr[i].substring(1);\n      }\n\n      return splitStr.join(' ');\n    },\n    getCollectionTotalValue: function getCollectionTotalValue() {\n      var val = 0;\n      var Collection = this.$store.state.Collection;\n\n      if (Collection[0]) {\n        Collection.forEach(function (x) {\n          if (x.forSalePrice) {\n            val += +x.forSalePrice;\n          } else if (x.marketValue) {\n            val += +x.marketValue;\n          } else if (x.forTradeValue) {\n            val += +x.forTradeValue;\n          }\n        });\n      }\n\n      if (val > 0) {\n        return val;\n      } else {\n        return 'N/A';\n      }\n    }\n  },\n  computed: {\n    //   IsModalPopped () {\n    //       return this.$store.state.isModalPopped\n    //   },\n    isLoading: function isLoading() {\n      return this.$store.state.isLoading;\n    },\n    User: function User() {\n      return this.$store.state.User;\n    },\n    isDragToOrganize: function isDragToOrganize() {\n      return this.$store.state.isDragToOrganize;\n    },\n    Collection: function Collection() {\n      if (this.isManagingCollection) {\n        return this.$store.state.FilteredCollection;\n      } else return this.$store.state.Collection;\n    },\n    isManagingCollection: function isManagingCollection() {\n      return this.$store.state.isManagingCollection;\n    },\n    isUserLoaded: function isUserLoaded() {\n      return this.$store.state.isUserLoaded;\n    },\n    isCollectionLoaded: function isCollectionLoaded() {\n      return this.$store.state.isCollectionLoaded;\n    },\n    isFilteringCollection: function isFilteringCollection() {\n      return this.$store.state.isFilteringCollection;\n    }\n  },\n  created: function created() {\n    this.$store.dispatch('loadUserCollection');\n    this.$store.dispatch('getFavorites');\n  }\n};",null]}