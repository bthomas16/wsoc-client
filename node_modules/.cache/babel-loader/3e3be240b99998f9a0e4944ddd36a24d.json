{"remainingRequest":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/thread-loader/dist/cjs.js!/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/babel-loader/lib/index.js!/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/eslint-loader/index.js??ref--13-0!/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/src/State/store.js","dependencies":[{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/src/State/store.js","mtime":1552863540227},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/cache-loader/dist/cjs.js","mtime":1548990847448},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/thread-loader/dist/cjs.js","mtime":1548990850389},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/babel-loader/lib/index.js","mtime":1548990846981},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/eslint-loader/index.js","mtime":1548990848181}],"contextDependencies":[],"result":["import _defineProperty from \"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n\nvar _mutations;\n\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport UtilityMethod from './StoreUtilityMethods.js';\nVue.use(Vuex);\nvar headers = {\n  'Content-Type': 'application/json',\n  'authorization': localStorage.getItem('watchJwt')\n};\nvar fileHeaders = {\n  'Content-Type': 'multipart/form-data',\n  'authorization': localStorage.getItem('watchJwt')\n};\n\nvar axios = require('axios'); // END IMPORTS\n\n\nvar LOADING = 'LOADING';\nvar NOT_LOADING = 'NOT_LOADING'; // const AUTHENTICATING = 'AUTHENTICATING'\n\nvar AUTH_SUCCESS = 'AUTH_SUCCESS';\nvar AUTH_FAILURE = 'AUTH_FAILURE';\nvar LOGOUT = 'LOGOUT';\nvar GET_USER = 'GET_USER';\nvar VALIDATE_JWT = 'VALIDATE_JWT';\nvar INVALIDATE_JWT = 'INVALIDATE_JWT';\nvar NAME_COLLECTION = 'NAME_COLLECTION';\nvar SET_COLLECTION = 'SET_COLLECTION';\nvar SET_FILTERED_COLLECTION = 'SET_FILTERED_COLLECTION';\nvar SUBMIT_NEW_WATCH = 'SUBMIT_NEW_WATCH';\nvar SELECT_WATCH = 'SELECT_WATCH';\nvar WATCH_ORDER_UPDATED = 'WATCH_ORDER_UPDATED';\nvar TOGGLE_FAVORITE = 'TOGGLE_FAVORITE';\nvar SET_NUMBER_FSOT = 'SET_NUMBER_FSOT';\nvar FAVORITES_COLLECTION = 'FAVORITES_COLLECTION';\nvar CARD_SIZE_TO_USE = 'CARD_SIZE_TO_USE';\nvar TOGGLE_IS_MANAGING_COLLECTION = 'TOGGLE_IS_MANAGING_COLLECTION';\nvar TOGGLE_IS_SHOW_FLAGS = 'TOGGLE_IS_SHOW_FLAGS';\nvar TOGGLE_IS_SHOW_EDIT_FLAGS = 'TOGGLE_IS_SHOW_EDIT_FLAGS';\nvar TOGGLE_IS_DRAG_TO_ORGANIZE = 'TOGGLE_IS_DRAG_TO_ORGANIZE';\nvar SERVER_VALIDATION_ERROR = 'SERVER_VALIDATION_ERROR';\nvar FILTERING = 'FILTERING'; // loading spinner hook/boolean for SortFilter api\n\nvar VIEWING_PREVIOUS_WATCHES = 'VIEWING_PREVIOUS_WATCHES';\nvar SUBMIT_EDIT_WATCH = 'SUBMIT_EDIT_WATCH';\nvar WELCOME_EMAIL = 'WELCOME_EMAIL';\nvar CONTACT_EMAIL = 'CONTACT_EMAIL';\nvar FORGOT_PASSWORD_EMAIL = 'FORGOT_PASSWORD_EMAIL';\nvar SET_COOKIE_WOTD = 'SET_COOKIE_WOTD';\nvar IS_SHUFFLE_WHILE_MANAGE = 'IS_SHUFFLE_WHILE_MANAGE';\nvar SET_CROPPIE_WATCH_ORDER = 'SET_CROPPIE_WATCH_ORDER';\nvar DETERMINE_IMAGE_CAN_BE_EDITED = 'DETERMINE_IMAGE_CAN_BE_EDITED';\nvar REMOVE_WATCH_FROM_COLLECTION = 'REMOVE_WATCH_FROM_COLLECTION';\nvar TOGGLE_IS_MODAL_POPPED = 'TOGGLE_IS_MODAL_POPPED';\nvar state = {\n  DelayPrompt: null,\n  isLoading: false,\n  isAuthorized: false,\n  User: {},\n  Collection: [],\n  FilteredCollection: [],\n  CurrentCardSize: 'md',\n  MobileCardSizeToUse: 4,\n  DesktopCardSizeToUse: 4,\n  Favorites: [],\n  NumberFSOT: 0,\n  // array of watch id's\n  isManagingCollection: false,\n  isFilteringCollection: false,\n  isViewingPreviousWatches: false,\n  isShowFlags: true,\n  isShowEditFlags: true,\n  isDragToOrganize: false,\n  isUserLoaded: false,\n  isCollectionLoaded: false,\n  selectedWatch: {},\n  isServerValidationError: false,\n  serverValidationError: null,\n  cookieValueWOTD: 0,\n  isShuffleWhileManage: false,\n  croppieWatchOrder: 0,\n  isImageEditable: false,\n  isModalPopped: false // check for any modals showing on the page\n\n};\nvar mutations = (_mutations = {}, _defineProperty(_mutations, LOADING, function (state) {\n  // console.log('loading is true')\n  state.isLoading = true;\n}), _defineProperty(_mutations, NOT_LOADING, function (state) {\n  // console.log('loading is false')\n  state.isLoading = false;\n}), _defineProperty(_mutations, AUTH_SUCCESS, function (state, user) {\n  state.User = user;\n  state.isAuthorized = true;\n  state.isUserLoaded = true;\n}), _defineProperty(_mutations, AUTH_FAILURE, function (state) {\n  state.isAuthorized = false;\n  state.isLoading = false;\n}), _defineProperty(_mutations, LOGOUT, function (state) {\n  state.isAuthorized = false;\n}), _defineProperty(_mutations, VALIDATE_JWT, function (state) {\n  state.isAuthorized = true;\n}), _defineProperty(_mutations, INVALIDATE_JWT, function (state) {\n  console.log('this is weird');\n  state.isAuthorized = false;\n}), _defineProperty(_mutations, SUBMIT_NEW_WATCH, function (state, watch) {\n  state.isCollectionLoaded = true;\n  state.Collection.push(watch);\n}), _defineProperty(_mutations, SUBMIT_EDIT_WATCH, function (state, watch) {\n  var watchToUpdate = state.Collection.find(function (w) {\n    return w.id == watch.id;\n  });\n  watchToUpdate = watch;\n}), _defineProperty(_mutations, SET_COLLECTION, function (state, collection) {\n  state.isCollectionLoaded = true;\n\n  if (collection) {\n    state.Collection = collection;\n  }\n}), _defineProperty(_mutations, SET_FILTERED_COLLECTION, function (state, collection) {\n  state.isCollectionLoaded = true;\n\n  if (collection) {\n    state.FilteredCollection = collection;\n  }\n}), _defineProperty(_mutations, SELECT_WATCH, function (state, watch) {\n  state.selectedWatch = watch;\n}), _defineProperty(_mutations, WATCH_ORDER_UPDATED, function (state, reorderedCollection) {\n  state.Collection = reorderedCollection;\n}), _defineProperty(_mutations, FAVORITES_COLLECTION, function (state, favorites) {\n  if (favorites[0]) {\n    var mappedFavorites = favorites.map(function (watch) {\n      if (watch.isCurrentFavorite == true) return watch;\n    });\n    state.Favorites = mappedFavorites;\n  }\n}), _defineProperty(_mutations, SET_NUMBER_FSOT, function (state, numberFSOT) {\n  state.NumberFSOT = numberFSOT;\n}), _defineProperty(_mutations, CARD_SIZE_TO_USE, function (state, size) {\n  switch (size) {\n    case 'sm':\n      state.CurrentCardSize = size;\n      state.MobileCardSizeToUse = 3;\n      state.DesktopCardSizeToUse = 3;\n      break;\n\n    case 'md':\n      state.CurrentCardSize = size;\n      state.MobileCardSizeToUse = 4;\n      state.DesktopCardSizeToUse = 4;\n      break;\n\n    case 'lg':\n      state.CurrentCardSize = size;\n      state.MobileCardSizeToUse = 6;\n      state.DesktopCardSizeToUse = 6;\n      break;\n\n    default:\n      state.CurrentCardSize = 'sm';\n      state.MobileCardSizeToUse = 3;\n      state.DesktopCardSizeToUse = 3;\n  }\n}), _defineProperty(_mutations, TOGGLE_FAVORITE, function (state, favorites) {\n  state.Favorites = favorites;\n}), _defineProperty(_mutations, TOGGLE_IS_MANAGING_COLLECTION, function (state) {\n  state.isManagingCollection = !state.isManagingCollection;\n\n  if (state.isManagingCollection) {\n    state.FilteredCollection = state.Collection;\n  }\n}), _defineProperty(_mutations, TOGGLE_IS_SHOW_FLAGS, function (state) {\n  state.isShowFlags = !state.isShowFlags;\n}), _defineProperty(_mutations, TOGGLE_IS_SHOW_EDIT_FLAGS, function (state, value) {\n  state.isShowEditFlags = value;\n}), _defineProperty(_mutations, TOGGLE_IS_DRAG_TO_ORGANIZE, function (state, value) {\n  state.isDragToOrganize = value;\n}), _defineProperty(_mutations, FILTERING, function (state, value) {\n  state.isFilteringCollection = value;\n}), _defineProperty(_mutations, SERVER_VALIDATION_ERROR, function (state, err) {\n  switch (err) {\n    case 'jsonwebtoken':\n      state.isServerValidationError = true;\n      state.serverValidationError = 'Your session has expired. Please login and try again.';\n      break;\n\n    default:\n      state.isServerValidationError = true;\n      state.serverValidationError = 'Your session has expired. Please login and try again.';\n  }\n}), _defineProperty(_mutations, VIEWING_PREVIOUS_WATCHES, function (state, value) {\n  state.isViewingPreviousWatches = value;\n}), _defineProperty(_mutations, SET_COOKIE_WOTD, function (state, wotdIndex) {\n  state.cookieValueWOTD = wotdIndex;\n}), _defineProperty(_mutations, IS_SHUFFLE_WHILE_MANAGE, function (state, value) {\n  state.isShuffleWhileManage = value;\n}), _defineProperty(_mutations, SET_CROPPIE_WATCH_ORDER, function (state, value) {\n  state.croppieWatchOrder = value;\n}), _defineProperty(_mutations, DETERMINE_IMAGE_CAN_BE_EDITED, function (state, value) {\n  state.isImageEditable = value;\n}), _defineProperty(_mutations, REMOVE_WATCH_FROM_COLLECTION, function (state, idToRemove) {\n  state.Collection = state.Collection.filter(function (watch) {\n    return watch.id !== idToRemove;\n  });\n  state.FilteredCollection = state.FilteredCollection.filter(function (watch) {\n    return watch.id !== idToRemove;\n  });\n}), _defineProperty(_mutations, TOGGLE_IS_MODAL_POPPED, function (state, value) {\n  state.isModalPopped = value;\n}), _mutations);\nvar actions = {\n  login: function login(context, formData) {\n    context.commit(LOADING);\n    return axios.post('/api/user/login', formData).then(function (res) {\n      if (!res.data.isSuccess) {\n        context.commit(NOT_LOADING);\n        context.commit(AUTH_FAILURE);\n        return res.data;\n      }\n\n      localStorage.setItem('watchJwt', res.data.token);\n      context.commit(AUTH_SUCCESS, res.data.user);\n      context.commit(NOT_LOADING);\n      return res.data;\n    }).catch(function (err) {\n      console.log(err.data, 'ok srsly fuck with me');\n      context.commit(NOT_LOADING);\n      context.commit(AUTH_FAILURE);\n      return err.data;\n    });\n  },\n  register: function register(context, formData) {\n    var _this = this;\n\n    context.commit(LOADING);\n    return axios({\n      method: 'POST',\n      url: '/api/user/register',\n      data: formData\n    }).then(function (res) {\n      localStorage.setItem('watchJwt', res.data.token);\n      context.commit(AUTH_SUCCESS, res.data.user);\n      context.commit(NOT_LOADING);\n      return res.data;\n    }).catch(function (err) {\n      _this.responseStyle = 'danger';\n      _this.responseMessage = err.data.message;\n      _this.form = {};\n      context.commit(AUTH_FAILURE);\n      context.commit(NOT_LOADING);\n      return err.data;\n    });\n  },\n  fbookAuth: function fbookAuth(context, data) {\n    context.commit(LOADING);\n    return axios({\n      method: 'POST',\n      url: '/api/user/fbook-auth',\n      data: data\n    }).then(function (res) {\n      if (res.data.isSuccess) {\n        // login\n        localStorage.setItem('watchJwt', res.data.token);\n        context.commit(AUTH_SUCCESS, res.data.user);\n        window.location.href = \"/profile\";\n      } else {\n        // Failed to login\n        context.commit(NOT_LOADING);\n      }\n    }).catch(function (err) {\n      // err\n      context.commit(NOT_LOADING);\n    });\n  },\n  validateEmailAddressUnique: function validateEmailAddressUnique(context, emailAddress) {\n    return axios({\n      method: 'GET',\n      url: '/api/user/validate-email',\n      params: {\n        email: emailAddress\n      },\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      }\n    }).then(function (res) {\n      console.log(res.data.isSuccess, 'rrooze');\n      return res.data.isSuccess;\n    }).catch(function (err) {\n      console.log(err);\n    });\n  },\n  user: function user(context) {\n    context.commit(LOADING);\n    axios({\n      method: 'GET',\n      url: '/api/user/profile',\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      }\n    }).then(function (res) {\n      context.commit(AUTH_SUCCESS, res.data.user);\n      context.commit(NOT_LOADING);\n    }).catch(function (err) {\n      console.log(err);\n      context.commit(NOT_LOADING);\n      context.commit(INVALIDATE_JWT);\n      context.commit(SERVER_VALIDATION_ERROR); // this.$ga.event({\n      //   eventCategory: 'ERROR',\n      //   eventAction: 'GET_User()_Server_Validation_Error',\n      //   eventLabel: '[store] Error on GET User'\n      // })\n    });\n  },\n  logout: function logout(context) {\n    context.commit(LOADING);\n    localStorage.removeItem('watchJwt');\n    context.commit(LOGOUT);\n    context.commit(NOT_LOADING);\n  },\n  validateJwt: function validateJwt(context) {\n    context.commit(LOADING);\n    return axios({\n      method: 'GET',\n      url: '/api/user/validate-jwt/',\n      params: {\n        jwt: localStorage.getItem('watchJwt')\n      }\n    }).then(function (res) {\n      if (res.data.isSuccess) {\n        context.commit(VALIDATE_JWT);\n        context.commit(NOT_LOADING);\n        return res;\n      } else {\n        // context.commit(INVALIDATE_JWT)\n        context.commit(NOT_LOADING);\n        return res;\n      }\n    }).catch(function (err) {\n      context.commit(NOT_LOADING);\n      return err;\n    });\n  },\n  loadUserCollection: function loadUserCollection(context) {\n    context.commit(LOADING);\n    context.commit(FILTERING, false);\n    axios({\n      method: 'GET',\n      url: '/api/watch',\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      }\n    }).then(function (res) {\n      var collection = res.data.collection;\n      context.commit(SET_COLLECTION, collection);\n      context.commit(FILTERING, false);\n      context.commit(NOT_LOADING);\n      UtilityMethod.CheckAndSetCookie(state.Collection.length);\n    }).catch(function (err) {\n      context.commit(NOT_LOADING);\n      context.commit(FILTERING, false); // context.commit(INVALIDATE_JWT)\n\n      context.commit(SET_COLLECTION); // context.commit(SERVER_VALIDATION_ERROR)\n\n      return err;\n    });\n  },\n  submitNewWatch: function submitNewWatch(context, watch) {\n    context.commit(LOADING);\n    axios({\n      method: 'POST',\n      url: '/api/watch',\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      },\n      data: watch\n    }).then(function (res) {\n      context.commit(SUBMIT_NEW_WATCH, res.data.watch);\n      context.commit(NOT_LOADING);\n      return res.data.watch.id;\n    }).catch(function (err) {\n      context.commit(NOT_LOADING);\n      context.commit(INVALIDATE_JWT);\n      context.commit(SERVER_VALIDATION_ERROR); // this.$ga.event({\n      //   eventCategory: 'ERROR',\n      //   eventAction: 'POST_submitNewWatch()_Server_Validation_Error',\n      //   eventLabel: '[store] Error on POST submitNewWatch()'\n      // })\n\n      return err;\n    });\n  },\n  submitEditWatch: function submitEditWatch(context, watch) {\n    context.commit(LOADING);\n    axios({\n      method: 'PUT',\n      url: '/api/watch/',\n      params: {\n        id: watch.id\n      },\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      },\n      data: watch\n    }).then(function (res) {\n      context.commit(SUBMIT_EDIT_WATCH, res.data.watch);\n      context.commit(NOT_LOADING);\n      return true;\n    }).catch(function (err) {\n      context.commit(NOT_LOADING);\n      context.commit(INVALIDATE_JWT);\n      context.commit(SERVER_VALIDATION_ERROR); // Analytics\n      // this.$ga.event({\n      //   eventCategory: 'ERROR',\n      //   eventAction: 'PUT_submitEditWatch()_Server_Validation_Error',\n      //   eventLabel: '[store] Error on PUT submitEditWatch()'\n      // })\n\n      return err;\n    });\n  },\n  removeExistingWatch: function removeExistingWatch(context, id) {\n    axios({\n      method: 'PUT',\n      url: '/api/watch/remove/',\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      },\n      params: {\n        id: id\n      }\n    }).then(function (res) {\n      context.commit(NOT_LOADING);\n      context.commit(REMOVE_WATCH_FROM_COLLECTION, res.data.id);\n    }).catch(function (err) {\n      console.log('err :', err);\n      context.commit(NOT_LOADING);\n      context.commit(INVALIDATE_JWT);\n      context.commit(SERVER_VALIDATION_ERROR); // Analytics\n      // this.$ga.event({\n      //   eventCategory: 'ERROR',\n      //   eventAction: 'PUT_removeExistingWatch()_Server_Validation_Error',\n      //   eventLabel: '[store] Error on PUT removeExistingWatch()'\n      // })\n\n      return err;\n    });\n  },\n  createRemoveWatch: function createRemoveWatch(context, watchDetails) {\n    context.commit(LOADING);\n    axios({\n      method: 'POST',\n      url: '/api/watch/remove',\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      },\n      data: watchDetails\n    }).then(function (res) {\n      context.commit(NOT_LOADING);\n    }).catch(function (err) {\n      context.commit(NOT_LOADING);\n      context.commit(INVALIDATE_JWT);\n      context.commit(SERVER_VALIDATION_ERROR); // Analytics\n      // this.$ga.event({\n      //   eventCategory: 'ERROR',\n      //   eventAction: 'POST_createRemoveWatch()_Server_Validation_Error',\n      //   eventLabel: '[store] Error on POST createRemoveWatch()'\n      // })\n\n      return err;\n    });\n  },\n  selectWatch: function selectWatch(context, watch) {\n    context.commit('SELECT_WATCH', watch);\n    return true;\n  },\n  updateCollectionOrder: function updateCollectionOrder(context, newCollectionOrder) {\n    // NO LOADING NEEDING\n    axios({\n      method: 'PUT',\n      url: '/api/watch/update-order',\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      },\n      data: newCollectionOrder\n    }).then(function (res) {\n      context.commit(SET_COLLECTION, res.data.collection);\n    }).catch(function (err) {\n      context.commit(INVALIDATE_JWT);\n      context.commit(SERVER_VALIDATION_ERROR); // Analytics\n      // this.$ga.event({\n      //   eventCategory: 'ERROR',\n      //   eventAction: 'PUT_updateCollectionOrder()_Server_Validation_Error',\n      //   eventLabel: '[store] Error on PUT updateCollectionOrder()'\n      // })\n\n      return err;\n    });\n  },\n  getFavorites: function getFavorites(context) {\n    // NO LOADING NEEDING\n    axios({\n      method: 'GET',\n      url: '/api/watch/favorite',\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      }\n    }).then(function (res) {\n      context.commit(FAVORITES_COLLECTION, res.data.favorites);\n    }).catch(function (err) {\n      context.commit(INVALIDATE_JWT);\n      context.commit(SERVER_VALIDATION_ERROR); // Analytics\n      // this.$ga.event({\n      //   eventCategory: 'ERROR',\n      //   eventAction: 'GET_getFavorites()_Server_Validation_Error',\n      //   eventLabel: '[store] Error on GET getFavorites()'\n      // })\n\n      return err;\n    });\n  },\n  getNumberFSOT: function getNumberFSOT(context) {\n    // NO LOADING NEEDING\n    axios({\n      method: 'GET',\n      url: '/api/watch/number-fsot',\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      }\n    }).then(function (res) {\n      context.commit(SET_NUMBER_FSOT, +res.data.numberFSOT);\n    }).catch(function (err) {\n      context.commit(INVALIDATE_JWT);\n      context.commit(SERVER_VALIDATION_ERROR); // Analytics\n      // this.$ga.event({\n      //   eventCategory: 'ERROR',\n      //   eventAction: 'GET_getNumberFSOT()_Server_Validation_Error',\n      //   eventLabel: '[store] Error on GET getNumberFSOT()'\n      // })\n\n      return err;\n    });\n  },\n  sizeCardToUse: function sizeCardToUse(context, size) {\n    context.commit(CARD_SIZE_TO_USE, size);\n  },\n  toggleWatchFavorite: function toggleWatchFavorite(context, watchId) {\n    // NO LOADING NEEDING\n    axios({\n      method: 'POST',\n      url: '/api/watch/favorite/',\n      params: {\n        watchId: watchId\n      },\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      }\n    }).then(function (res) {\n      context.commit(TOGGLE_FAVORITE, res.data.favorites);\n    }).catch(function (err) {\n      context.commit(INVALIDATE_JWT);\n      context.commit(SERVER_VALIDATION_ERROR); // Analytics\n      // this.$ga.event({\n      //   eventCategory: 'ERROR',\n      //   eventAction: 'POST_toggleWatchFavorite()_Server_Validation_Error',\n      //   eventLabel: '[store] Error on POST toggleWatchFavorite()'\n      // })\n\n      return err;\n    });\n  },\n  toggleIsManagingCollection: function toggleIsManagingCollection(context) {\n    // NO LOADING NEEDING\n    context.commit(TOGGLE_IS_MANAGING_COLLECTION);\n  },\n  toggleIsShowFlags: function toggleIsShowFlags(context) {\n    // NO LOADING NEEDING\n    context.commit(TOGGLE_IS_SHOW_FLAGS);\n  },\n  toggleIsShowEditFlags: function toggleIsShowEditFlags(context, value) {\n    // NO LOADING NEEDED\n    context.commit(TOGGLE_IS_SHOW_EDIT_FLAGS, value);\n  },\n  toggleIsDragToOrganize: function toggleIsDragToOrganize(context, value) {\n    // NO LOADING NEEDED\n    context.commit(TOGGLE_IS_DRAG_TO_ORGANIZE, value);\n  },\n  getFilteredCollection: function getFilteredCollection(context, filterObj) {\n    axios({\n      method: 'GET',\n      url: \"/api/watch/sort-filter/\".concat(filterObj.category, \"/\"),\n      params: {\n        option: filterObj.option\n      },\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      }\n    }).then(function (res) {\n      var collection = res.data.collection; // context.commit(SET_COLLECTION, collection)\n\n      context.commit(SET_FILTERED_COLLECTION, collection);\n\n      if (filterObj.category === 'previous') {\n        context.commit(VIEWING_PREVIOUS_WATCHES, true);\n      }\n    }).catch(function (err) {\n      console.log(err);\n      context.commit(INVALIDATE_JWT);\n      context.commit(SERVER_VALIDATION_ERROR); // Analytics\n      // this.$ga.event({\n      //   eventCategory: 'ERROR',\n      //   eventAction: 'GET_getFilteredCollection()_Server_Validation_Error',\n      //   eventLabel: '[store] Error on GET getFilteredCollection()'\n      // })\n\n      return err;\n    });\n  },\n  getFilteredCollectionBySearchTerm: function getFilteredCollectionBySearchTerm(context, searchTermToFilterByLowerCase) {\n    axios({\n      method: 'GET',\n      url: '/api/watch/sort-filter/search/',\n      params: {\n        searchTerm: searchTermToFilterByLowerCase\n      },\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      }\n    }).then(function (res) {\n      var collection = res.data.collection; // context.commit(SET_COLLECTION, collection)\n\n      context.commit(SET_FILTERED_COLLECTION, collection);\n      context.commit(NOT_LOADING);\n    }).catch(function (err) {\n      context.commit(NOT_LOADING); // context.commit(INVALIDATE_JWT)\n\n      context.commit(SERVER_VALIDATION_ERROR); // Analytics\n      // this.$ga.event({\n      //   eventCategory: 'ERROR',\n      //   eventAction: 'GET_getFilteredCollectionBySearchTerm()_Server_Validation_Error',\n      //   eventLabel: '[store] Error on GET getFilteredCollectionBySearchTerm()'\n      // })\n\n      return err;\n    });\n  },\n  uploadImagesToAwsS3: function uploadImagesToAwsS3(context, fileArr) {\n    context.commit(LOADING);\n    return axios({\n      method: 'POST',\n      url: '/api/upload/watch-images',\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      },\n      data: fileArr\n    }).then(function (res) {\n      context.commit(NOT_LOADING);\n      return res.data;\n    }).catch(function (err) {\n      context.commit(INVALIDATE_JWT);\n      context.commit(SERVER_VALIDATION_ERROR); // Analytics\n      // this.$ga.event({\n      //   eventCategory: 'ERROR',\n      //   eventAction: 'POST_uploadImagesToAwsS3()_Server_Validation_Error',\n      //   eventLabel: '[store] Error on POST uploadImagesToAwsS3()'\n      // })\n\n      return err;\n    });\n  },\n  uploadProfileImageToAwsS3: function uploadProfileImageToAwsS3(context, image) {\n    var imageFormData = new FormData();\n    imageFormData.append('image[' + 0 + ']', image);\n    context.commit(LOADING);\n    return axios({\n      method: 'PUT',\n      url: '/api/upload/profile-image',\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        'authorization': localStorage.getItem('watchJwt')\n      },\n      data: imageFormData\n    }).then(function (res) {\n      context.commit(NOT_LOADING);\n      return res.data.data;\n    }).catch(function (err) {\n      context.commit(NOT_LOADING);\n      context.commit(INVALIDATE_JWT);\n      context.commit(SERVER_VALIDATION_ERROR);\n      return err;\n    });\n  },\n  editUserProfile: function editUserProfile(context, formData) {\n    context.commit(LOADING);\n    return axios({\n      method: 'PUT',\n      url: '/api/user/edit',\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      },\n      data: formData\n    }).then(function (res) {\n      context.commit(NOT_LOADING);\n      return res.data;\n    }).catch(function (err) {\n      context.commit(NOT_LOADING);\n      context.commit(INVALIDATE_JWT);\n      context.commit(SERVER_VALIDATION_ERROR); // Analytics\n      // this.$ga.event({\n      //   eventCategory: 'ERROR',\n      //   eventAction: 'PUT_editUserProfile()_Server_Validation_Error',\n      //   eventLabel: '[store] Error on PUT editUserProfile()'\n      // })\n\n      return err;\n    });\n  },\n  serverValidationError: function serverValidationError(context, err) {\n    context.commit(SERVER_VALIDATION_ERROR, err);\n  },\n  getWatchInfoById: function getWatchInfoById(context, watchInfoId) {\n    return axios({\n      method: 'GET',\n      url: '/api/discover/watch-info',\n      params: {\n        watchInfoId: watchInfoId\n      }\n    }).then(function (res) {\n      return res.data.watchInfo;\n    }).catch(function (err) {\n      console.log(err);\n    });\n  },\n  // getWatchNewsArticles (context) {\n  //   context.commit(LOADING)\n  //   return axios({\n  //     method: 'GET',\n  //     url: '/api/watch-news'\n  //   }).then(res => {\n  //     context.commit(NOT_LOADING)\n  //     return res.data.articles\n  //   }).catch(err => {\n  //     console.log(err)\n  //     context.commit(NOT_LOADING)\n  //   })\n  // },\n  // getWatchNewsArticleById (context, id) {\n  //   context.commit(LOADING)\n  //   return axios({\n  //     method: 'GET',\n  //     url: '/api/watch-news/' + id\n  //   }).then(res => {\n  //     context.commit(NOT_LOADING)\n  //     return res.data.article\n  //   }).catch(err => {\n  //     console.log(err)\n  //     context.commit(NOT_LOADING)\n  //   })\n  // },\n  viewingPreviousWatches: function viewingPreviousWatches(context, value) {\n    context.commit(VIEWING_PREVIOUS_WATCHES, value);\n  },\n  getRemovedWatchDetails: function getRemovedWatchDetails(context, id) {\n    context.commit(LOADING);\n    return axios({\n      method: 'GET',\n      url: '/api/watch/removed',\n      params: {\n        id: id\n      },\n      headers: {\n        'Content-Type': 'application/json',\n        'authorization': localStorage.getItem('watchJwt')\n      }\n    }).then(function (res) {\n      context.commit(NOT_LOADING);\n      return res.data.collection;\n    }).catch(function (err) {\n      console.log(err);\n      context.commit(NOT_LOADING);\n    });\n  },\n  getWatchShareById: function getWatchShareById(context, watchId) {\n    context.commit(LOADING);\n    return axios({\n      method: 'GET',\n      url: '/api/watch-share/by-watchid',\n      params: {\n        watchId: watchId\n      }\n    }).then(function (res) {\n      context.commit(NOT_LOADING);\n      return res.data.watch;\n    }).catch(function (err) {\n      console.log(err);\n      context.commit(NOT_LOADING);\n    });\n  },\n  // EMAILS\n  contacUsEmail: function contacUsEmail(context, formData) {\n    context.commit(LOADING);\n    return axios({\n      method: 'POST',\n      url: '/api/email/contact',\n      data: formData\n    }).then(function (res) {\n      context.commit(NOT_LOADING);\n      return res.data;\n    }).catch(function (err) {\n      console.log(err);\n      context.commit(NOT_LOADING);\n    });\n  },\n  sendWelcomeEmail: function sendWelcomeEmail(context, formData) {\n    context.commit(LOADING);\n    return axios({\n      method: 'POST',\n      url: '/api/email/welcome',\n      data: formData\n    }).then(function (res) {\n      context.commit(NOT_LOADING);\n      return res.data;\n    }).catch(function (err) {\n      console.log(err);\n      context.commit(NOT_LOADING);\n    });\n  },\n  forgotPasswordEmail: function forgotPasswordEmail(context, formData) {\n    context.commit(LOADING);\n    return axios({\n      method: 'POST',\n      url: '/api/email/forgot-password',\n      data: formData\n    }).then(function (res) {\n      context.commit(NOT_LOADING);\n      return res.data;\n    }).catch(function (err) {\n      console.log(err);\n      context.commit(NOT_LOADING);\n    });\n  },\n  SetCookieStateWOTD: function SetCookieStateWOTD(context, wotdIndex) {\n    context.commit(SET_COOKIE_WOTD, wotdIndex);\n  },\n  isTryingShuffleWhileManage: function isTryingShuffleWhileManage(context, value) {\n    context.commit(IS_SHUFFLE_WHILE_MANAGE, value);\n  },\n  setCroppieWatchOrder: function setCroppieWatchOrder(context, value) {\n    context.commit(SET_CROPPIE_WATCH_ORDER, value);\n  },\n  CanImageCanBeEditedByUrl: function CanImageCanBeEditedByUrl(context, value) {\n    context.commit(DETERMINE_IMAGE_CAN_BE_EDITED, value);\n  },\n  ToggleIsModalPopped: function ToggleIsModalPopped(context, value) {\n    context.commit(TOGGLE_IS_MODAL_POPPED, value);\n  }\n};\nvar getters = {\n  getLoadingStatus: function getLoadingStatus(state) {\n    return state.isLoading;\n  },\n  getUserLoadStatus: function getUserLoadStatus(state) {\n    return state.isUserLoaded;\n  },\n  getCollectionLoadStatus: function getCollectionLoadStatus(state) {\n    return state.isCollectionLoaded;\n  },\n  getCollection: function getCollection(state) {\n    return state.Collection;\n  },\n  getFavorites: function getFavorites(State) {\n    return state.Favorites;\n  },\n  getUser: function getUser(state) {\n    return state.User;\n  }\n};\nexport default new Vuex.Store({\n  state: state,\n  actions: actions,\n  mutations: mutations,\n  getters: getters\n});",null]}