{"remainingRequest":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/thread-loader/dist/cjs.js!/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/babel-loader/lib/index.js!/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/src/components/Profile/Collection/FileSelector.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/src/components/Profile/Collection/FileSelector.vue","mtime":1551233128443},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/cache-loader/dist/cjs.js","mtime":1548990847448},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/thread-loader/dist/cjs.js","mtime":1548990850389},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/babel-loader/lib/index.js","mtime":1548990846981},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/cache-loader/dist/cjs.js","mtime":1548990847448},{"path":"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/vue-loader/lib/index.js","mtime":1548990850526}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/brentthomas/Desktop/Developer/Sandbox/JS/CRUD/VUE/WatchCollection/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'fileSelector',\n  props: {\n    value: File,\n    isPreviewBox: Boolean\n  },\n  data: function data() {\n    return {\n      ROOT_API: process.env.VUE_APP_ROOT_API,\n      isS3Uploading: false,\n      imgBase64Array: []\n    };\n  },\n  methods: {\n    uploadImagesToBase64: function () {\n      var _uploadImagesToBase = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(e) {\n        var vm, poop, files, j;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                vm = this;\n                poop = [];\n                files = e.target.files;\n                j = 0;\n\n              case 4:\n                if (!(j < files.length)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 7;\n                return vm.getBase64Url(files[j]).then(function (b64Url) {\n                  vm.imgBase64Array.push(b64Url);\n\n                  if (vm.imgBase64Array.length == files.length) {\n                    vm.$emit('setImagesOnAddWatch', vm.imgBase64Array); // vm.$refs.fileUpload.value = ''\n\n                    vm.imgBase64Array = [];\n                  }\n                });\n\n              case 7:\n                j++;\n                _context.next = 4;\n                break;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function uploadImagesToBase64(_x) {\n        return _uploadImagesToBase.apply(this, arguments);\n      }\n\n      return uploadImagesToBase64;\n    }(),\n    getBase64Url: function getBase64Url(file) {\n      return new Promise(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.readAsDataURL(file);\n\n        reader.onload = function (e) {\n          return resolve(reader.result);\n        };\n\n        reader.onerror = function (error) {\n          return reject(error);\n        };\n      });\n    }\n  } // FR.onload = function(e) {\n  //     let result = e.target.result\n  //     let imgBase64Url = e.target.result\n  //     vm.imgBase64Array.push(\n  //         { imgBase64Url,\n  //           order: index,\n  //           fileName: files[index].name\n  //         })\n  //     if (vm.imgBase64Array.length == files.length) {\n  //         vm.$emit('setImagesOnAddWatch', vm.imgBase64Array)\n  //     }\n  // }\n\n};",null]}